AWSTemplateFormatVersion: '2010-09-09'
Transform: "AWS::Serverless-2016-10-31"
Description: spica deployment cloudformation script
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
      Timeout: 30  # in seconds
Parameters: 
  LambdaExecutionRole:
    Type: String
    Default: celestial-service-execution-role
    Description: The primary role in that gives the Lambda function permission to do its work.
  Project:
    Type: String
  TargetEnvr:
    Type: String
    Description: The target environment for API Gateway deployment.
  SubDomain:
    Type: String
  Domain:
    Type: String
Conditions: 
  IsProd: !Equals [ !Ref TargetEnvr, prod ]
Resources:
  ##############################################
  ##### API Gateway and associated Lambdas #####
  ##############################################
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${TargetEnvr}
      EndpointConfiguration: REGIONAL
      DefinitionBody: {
          "openapi": "3.0.1",
          "info": {
            "version": "2020-01-06T07:45:41Z",
            "title": !Sub "${Project}-${TargetEnvr}-api"
          },
          "paths": {
            "/api/manifest": {
              "get": {
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-manifest/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book": {
              "get": {
                "parameters": [{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "post": {
                "parameters": [{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postBook"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}": {
              "get": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putBook"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "post": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "delete": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/bill": {
              "post": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postBookBill"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/bill/{billId}": {
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "billId",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putBookBill"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "delete": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "billId",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/member": {
              "post": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postBookMember"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/member/{mid}": {
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "mid",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putBookMember"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "delete": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "mid",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/member/{mid}/self": {
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "mid",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/showDelete": {
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/transfer": {
              "post": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/postBookTransfer"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/book/{id}/transfer/{tid}": {
              "put": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "tid",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putBookTransfer"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "delete": {
                "parameters": [{
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "tid",
                  "in": "path",
                  "required": true,
                  "schema": {"type": "string"}
                },{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-book/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            },
            "/api/transfer": {
              "post": {
                "parameters": [{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-transfer/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              },
              "put": {
                "parameters": [{
                  "name": "x-api-device",
                  "in": "header",
                  "required": true,
                  "schema": {"type": "string"}
                }],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/putTransfer"
                      }
                    }
                  },
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "schema": {"type": "string"}
                      }
                    },
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Empty"
                        }
                      }
                    }
                  }
                },
                "x-amazon-apigateway-request-validator" : "Validate body, query string parameters, and headers",
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Project}-${TargetEnvr}-transfer/invocations",
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                      }
                    }
                  },
                  "passthroughBehavior": "when_no_match",
                  "contentHandling": "CONVERT_TO_TEXT"
                }
              }
            }
          },
          "definitions": {
            "Empty": {
              "type": "object",
              "title": "Empty Schema"
            },
            "postBook": {
              "type": "object",
              "properties": {
                "name": {"type": "string"},
                "symbol": {"type": "string"}
              },
              "required": ["name"]
            },
            "putBook": {
              "type": "object",
              "properties": {
                "name": {"type": "string"},
                "symbol": {"type": "string"}
              }
            },
            "postBookBill": {
              "type": "object",
              "properties": {
                "date": {"type": "string"},
                "type": {"type": "string", "enum": ["in","out"]},
                "descr": {"type": "string"},
                "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                "former": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {"type": "string"},
                      "method": {"type": "string", "enum": ["%","N","$","±"]},
                      "value": {"type": "number"},
                      "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                    },
                    "required": ["id","method","amount"]
                  }
                },
                "latter": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {"type": "string"},
                      "method": {"type": "string", "enum": ["%","N","$","±"]},
                      "value": {"type": "number"},
                      "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                    },
                    "required": ["id","method","amount"]
                  }
                },
                "memo": {"type": "string"}
              },
              "required": ["date","type","descr","amount","former","latter"]
            },
            "putBookBill": {
              "type": "object",
              "properties": {
                "date": {"type": "string"},
                "type": {"type": "string", "enum": ["in","out"]},
                "descr": {"type": "string"},
                "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                "former": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {"type": "string"},
                      "method": {"type": "string", "enum": ["%","N","$","±"]},
                      "value": {"type": "number"},
                      "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                    },
                    "required": ["id","method","amount"]
                  }
                },
                "latter": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {"type": "string"},
                      "method": {"type": "string", "enum": ["%","N","$","±"]},
                      "value": {"type": "number"},
                      "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                    },
                    "required": ["id","method","amount"]
                  }
                },
                "memo": {"type": "string"}
              },
              "required": ["date","type","descr","amount","former","latter"]
            },
            "postBookMember": {
              "type": "object",
              "properties": {
                "nickname": {"type": "string"}
              },
              "required": ["nickname"]
            },
            "putBookMember": {
              "type": "object",
              "properties": {
                "nickname": {"type": "string"}
              },
              "required": ["nickname"]
            },
            "postBookTransfer": {
              "type": "object",
              "properties": {
                "date": {"type": "string"},
                "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                "srcMemberId": {"type": "string"},
                "dstMemberId": {"type": "string"},
                "memo": {"type": "string"}
              },
              "required": ["date","amount","srcMemberId","dstMemberId"]
            },
            "putBookTransfer": {
              "type": "object",
              "properties": {
                "date": {"type": "string"},
                "amount": {"type": "number", "minimum": 0, "exclusiveMinimum": true},
                "srcMemberId": {"type": "string"},
                "dstMemberId": {"type": "string"},
                "memo": {"type": "string"}
              },
              "required": ["date","amount","srcMemberId","dstMemberId"]
            },
            "putTransfer": {
              "type": "object",
              "properties": {
                "token": {"type": "string"}
              },
              "required": ["token"]
            }
          },
          "x-amazon-apigateway-request-validators" : {
            "Validate body, query string parameters, and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : true
            },
            "Validate query string parameters and headers" : {
              "validateRequestParameters" : true,
              "validateRequestBody" : false
            }
          }
        }
  LambdaManifest:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.manifest
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-manifest
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
  InvokePermissionManifest:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaManifest]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-manifest
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaBook:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.book
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-book
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          DB_CLUSTER: !Sub '{{resolve:ssm:${TargetEnvr}-db-cluster:1}}'
          DB_HOST: !Sub '{{resolve:ssm:${TargetEnvr}-db-host:1}}'
          DB_PWD: !Sub '{{resolve:ssm:${TargetEnvr}-db-pwd:1}}'
          DB_USER: !Sub '{{resolve:ssm:${TargetEnvr}-db-user:1}}'
  InvokePermissionBook:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaBook]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-book
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaTransfer:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.transfer
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-transfer
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          DB_CLUSTER: !Sub '{{resolve:ssm:${TargetEnvr}-db-cluster:1}}'
          DB_HOST: !Sub '{{resolve:ssm:${TargetEnvr}-db-host:1}}'
          DB_PWD: !Sub '{{resolve:ssm:${TargetEnvr}-db-pwd:1}}'
          DB_USER: !Sub '{{resolve:ssm:${TargetEnvr}-db-user:1}}'
  InvokePermissionTransfer:
    Type: AWS::Lambda::Permission
    DependsOn: [ServerlessApi, LambdaTransfer]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-transfer
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerlessApi}/*
  LambdaDbClean:
    Type: AWS::Serverless::Function
    Properties:
      Architectures: [arm64]
      Handler: index.dbClean
      Runtime: nodejs18.x
      FunctionName: !Sub ${Project}-${TargetEnvr}-dbClean
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaExecutionRole}"
      CodeUri: ../../dist/webpack/lambda
      MemorySize: 128
      Environment:
        Variables:
          PROJECT: !Sub ${Project}
          DB_CLUSTER: !Sub '{{resolve:ssm:${TargetEnvr}-db-cluster:1}}'
          DB_HOST: !Sub '{{resolve:ssm:${TargetEnvr}-db-host:1}}'
          DB_PWD: !Sub '{{resolve:ssm:${TargetEnvr}-db-pwd:1}}'
          DB_USER: !Sub '{{resolve:ssm:${TargetEnvr}-db-user:1}}'
  InvokePermissionDbClean:
    Type: AWS::Lambda::Permission
    DependsOn: [EventBridge, LambdaDbClean]
    Properties:
      FunctionName: !Sub ${Project}-${TargetEnvr}-dbClean
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridge.Arn
  #########################################
  ##### Cloudfront and Route53 config #####
  #########################################
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${Domain}.'
      Name: !If [IsProd, !Sub '${SubDomain}.${Domain}.', !Sub '${SubDomain}-${TargetEnvr}.${Domain}.']
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt
        - CloudFrontDistribution
        - DomainName
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: [ServerlessApi, S3Bucket]
    Properties:
      DistributionConfig:
        Aliases: [!If [IsProd, !Sub '${SubDomain}.${Domain}', !Sub '${SubDomain}-${TargetEnvr}.${Domain}']]
        Origins:
        - DomainName: !Select [1, !Split ["//", !GetAtt S3Bucket.WebsiteURL]]
          Id: S3-hosted-website-ID
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
        - DomainName: !Sub '${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com'
          Id: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          OriginPath: !Sub /${TargetEnvr}
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginKeepaliveTimeout: 5
            OriginProtocolPolicy: https-only
        Enabled: 'true'
        HttpVersion: http2
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          TargetOriginId: S3-hosted-website-ID
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        CacheBehaviors:
        - PathPattern: /api/*
          AllowedMethods: [ "GET", "HEAD", "OPTIONS", "PUT", "PATCH", "POST", "DELETE"]
          ForwardedValues:
            Headers: [ "Authorization", "Accept" ]
            QueryString: true
          TargetOriginId: !Sub ${Project}-${TargetEnvr}-ApiEndpoint-ID
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        PriceClass: PriceClass_200
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:278497686406:certificate/8914c993-68c7-4e06-b741-def8fc0270ba
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
  ####################################
  ##### S3 Bucket and its policy #####
  ####################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Project}-${TargetEnvr}
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: [S3Bucket]
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument: !Join
      - ''
      - - '{
            "Version": "2012-10-17",
            "Id": "PolicyForCloudFrontPrivateContent",
            "Statement": [
                {
                    "Sid": "Allow-OAI-Access-To-Bucket",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": "'
        - !GetAtt S3Bucket.Arn
        - '/*"
                }
            ]
          }'
  #######################
  ##### EventBridge #####
  #######################
  EventBridge:
    Type: AWS::Events::Rule
    DependsOn: [LambdaDbClean]
    Properties:
      Name: !Sub ${Project}-${TargetEnvr}-db-clean
      ScheduleExpression: cron(0 0 * * ? *)
      State: ENABLED
      Targets: 
        - Arn: !GetAtt LambdaDbClean.Arn
          Id: !Sub ${Project}-${TargetEnvr}-db-clean